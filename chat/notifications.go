package chat

import (
	"average-watcher-bot/checker"
	"average-watcher-bot/data"
	"log"
	"strconv"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var bot *tgbotapi.BotAPI

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
func StartUp(token string) {
	var err error
	bot, err = tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatal(err)
	}

}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ö–æ—Å—Ç–∞
func SendAlert(chatID int64, ip string, status bool) {
	var msg tgbotapi.MessageConfig
	if status == true {
		msg = tgbotapi.NewMessage(chatID, "‚úÖ –°–µ—Ä–≤–µ—Ä –ø–æ –∞–¥—Ä–µ—Å—É "+ip+" —Ç–µ–ø–µ—Ä—å –æ–Ω–ª–∞–π–Ω!")
	} else {
		msg = tgbotapi.NewMessage(chatID, "‚ùå –°–µ—Ä–≤–µ—Ä –ø–æ –∞–¥—Ä–µ—Å—É "+ip+" –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç!")
	}

	bot.Send(msg)
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
func StartupNotify(watchers []int64, watchlist []string) {
	for _, watcherID := range watchers {
		msg := tgbotapi.NewMessage(watcherID,
			"*üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!*\n"+
				"üéØ –û—Ç—Å–ª–µ–∂—ã–≤–∞–µ–º—ã–µ ip: "+strconv.Itoa(len(watchlist))+"\n"+
				"üï∂ –û—Ç—Å–ª–µ–∂–∏–≤–∞—é—â–∏—Ö: "+strconv.Itoa(len(watchers))+"\n")
		bot.Send(msg)
	}
}

// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ö–æ—Å—Ç–æ–≤, –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ, —É–≤–µ–¥–æ–º–ª—è–µ—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
func UpdateStatusMapAndAlert(statusMap map[string]bool, watchers []int64) map[string]bool {
	for ip, status := range statusMap {
		newStatus := checker.CheckICMP(ip)
		if status != newStatus {
			for _, watcherID := range watchers {
				statusMap[ip] = newStatus
				SendAlert(watcherID, ip, newStatus)
			}
		}
	}

	data.SaveStatusMap(statusMap)
	return statusMap
}
